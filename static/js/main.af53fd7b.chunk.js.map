{"version":3,"sources":["components/Search.js","components/View.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","className","value","onChange","change","placeholder","type","View","weather","city","country","day","data","temp","pressure","description","APIkey","searchValue","App","state","err","getData","console","log","API","fetch","then","response","ok","Error","json","Date","getDay","date","toLocaleDateString","Math","round","main","setState","sys","catch","this","prevProps","prevState","handleInputChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.af53fd7b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = props => {\r\n    return ( \r\n        <div className=\"search\">\r\n            <form>\r\n                <input value={props.value} onChange={props.change} placeholder=\"Search city...\" type=\"text\"/>\r\n            </form>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Search;","import React from 'react';\r\n\r\nconst View = props => {\r\n\r\n    const {value, city, country, day, data, temp, pressure, description} = props.weather\r\n\r\n    return ( \r\n        <div className=\"view\">\r\n            <div className=\"box\">\r\n                <h2 className=\"place\">{city}, {country}</h2>\r\n                <p className=\"data\">{day}, {data}</p>\r\n                <div className=\"tempBox\">\r\n                    <h1 className=\"temp\">{temp}°C</h1>\r\n                </div>\r\n                <h2 className=\"description\">{description}</h2>\r\n                <p className=\"pressure\">{pressure} hPa</p>\r\n                \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default View;","import React from 'react';\nimport Search from './Search';\nimport View from './View';\nimport './App.scss';\n\nconst APIkey = \"968e94fc56180717722c598405dbd766\";\n\nlet searchValue = \"\";\n\nclass App extends React.Component {\n    state = {\n        value: \"Warszawa\",\n        city: \"\",\n        country: \"\",\n        day: \"\",\n        data: \"\",\n        temp: \"\",\n        pressure: \"\",\n        description: \"\",\n        err: \"\"\n    }\n\n    componentDidUpdate() {\n        \n        const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIkey}`\n\n        fetch(API)\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            throw Error(\"Nie udało się\")\n            })\n        .then(response => response.json())\n        .then(data => {\n                console.log(\"Tak\")\n        })\n        .catch(err => {\n                console.log(\"Nie\")\n            })\n    }\n\n\n    getData = () => {\n        console.log(this.state)\n\n        const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIkey}`\n\n        fetch(API)\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            throw Error(\"Nie udało się\")\n            })\n        .then(response => response.json())\n        .then(data => {\n\n            const numberOfDay = new Date().getDay();\n            const week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n            const day = week[numberOfDay];\n\n            const date = new Date().toLocaleDateString();\n            \n            // degrees Kelvin to Celsius and rounded\n            const temp = Math.round((data.main.temp - 273.15) * 10) / 10;\n\n            this.setState({\n                city: this.state.value,\n                country: data.sys.country,\n                day: day,\n                data: date,\n                temp: temp,\n                pressure: data.main.pressure,\n                description: data.weather[0].description,\n                err: false\n            })\n        })\n        .catch(err => {\n                this.setState({\n                    err: true\n                })\n                console.log(\"Nie znaleziono\")\n            })\n    }\n\n    // componentDidMount(prevProps, prevState) {\n    //     this.getData()\n    // }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.value !== this.state.value) {\n        this.getData()\n        }\n\n        searchValue = this.state.value;\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <Search value={searchValue} change={this.handleInputChange}/>\n                    <View weather={this.state}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}